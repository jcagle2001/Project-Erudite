/***************************************************************************************************************************************/
/*!
\file          Engine.h
\author        Justin Cagle
\par           justin.cagle\@outlook.com
\date          5/8/2018
\brief
Project Erudite - Copyright © 2018 Justin Cagle

*/
/***************************************************************************************************************************************/

#pragma once
#include "GameState.h"
#include <vector>
#include <SDL.h>

/*!
 ***************************************************************************************************************************************
 * \brief Forward declaration of GameState type.
 ***************************************************************************************************************************************/
class GameState;

/*!
 ***************************************************************************************************************************************
 * \brief Definition of an Engine object
 ***************************************************************************************************************************************/
class Engine
{
  public:
  /*!
   ***************************************************************************************************************************************
   * \brief Non-default ctor for the Engine object.
   ***************************************************************************************************************************************/
    Engine();

  /*!
   ***************************************************************************************************************************************
   * \brief Initialize the Engine object. This sets the window attributes and creates the window and OpenGL context.
   ***************************************************************************************************************************************/
    void init();

  /*!
   ***************************************************************************************************************************************
   * \brief Clean up and shutdown the engine object.
   ***************************************************************************************************************************************/
    void shutdown();
  

  /*!
   ***************************************************************************************************************************************
   * \brief Change the currently running state of the game.
   * \param state The state that we want to move to.
   ***************************************************************************************************************************************/
    void change_state(GameState* state);

  /*!
   ***************************************************************************************************************************************
   * \brief Push a new state on to the state stack.
   * \param state New state to put on the top of the stack.
   ***************************************************************************************************************************************/
    void push_state(GameState* state);

  /*!
   ***************************************************************************************************************************************
   * \brief Pop the top state off of the stack.
   ***************************************************************************************************************************************/
    void pop_state();

  /*!
   ***************************************************************************************************************************************
   * \brief Allow events to be handled at the state level.
   ***************************************************************************************************************************************/
    void handle_events();

  /*!
   ***************************************************************************************************************************************
   * \brief Update the engine object.
   ***************************************************************************************************************************************/
    void update();

  /*!
   ***************************************************************************************************************************************
   * \brief Allow the state to draw objects.
   ***************************************************************************************************************************************/
    void draw();
  
  /*!
   ***************************************************************************************************************************************
   * \brief Returns the running state of the engine.
   * \return True if running, otherwise false.
   ***************************************************************************************************************************************/
    bool is_running() const { return running_; }

  /*!
   ***************************************************************************************************************************************
   * \brief Sets running to false to trigger a shutdown.
   ***************************************************************************************************************************************/
    void quit() { running_ = false; }
    
  private:
  
  /*!
   ***************************************************************************************************************************************
   * \brief Running state.
   ***************************************************************************************************************************************/
    bool running_;

  /*!
   ***************************************************************************************************************************************
   * \brief Gamestate stack.
   ***************************************************************************************************************************************/
    std::vector <GameState*> states_;

  /*!
   ***************************************************************************************************************************************
   * \brief Pointer to the window instance.
   ***************************************************************************************************************************************/
    SDL_Window* window;

  /*!
   ***************************************************************************************************************************************
   * \brief Handle of the OpenGL context.
   ***************************************************************************************************************************************/
    SDL_GLContext context;
};

